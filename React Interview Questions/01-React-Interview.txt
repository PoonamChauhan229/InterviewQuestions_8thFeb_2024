üîç Q1: What are React hooks? Explain the difference between useState and useEffect.

> React hooks are functions that allow us to use 
>state and lifecycle features in functional components.
>useState is used to manage state,
>while useEffect is used to handle side effects like fetching data or subscribing to events.

üí° Code Example:
const [count, setCount] = useState(0);

useEffect(() => {
 document.title = `Count: ${count}`;
}, [count]);


üîç Q2.Why is React known as React?

>React is called React because it was designed to be a declarative, efficient, and flexible JavaScript library for building user interfaces.
>React is named React because of its ability to react to changes in data. When the data in a React component changes, React will automatically re-render the component so that it reflects the new data. This makes it easy to create UI that always look up-to-date
>React makes it painless ,to create interactive UIs.

üîç Q3.What is Emmet?

- Emmet is a built-in feature in Visual Studio Code. 
- We don‚Äôt have to install any extensions for emmet support.
- Emmet prevents us from writing the entire code by yourself by providing Emmet abbreviation.
- Emmet is enabled by default in html


üß© Q2: What is the Context API in React? How can it be used to manage global state?

A2: Context API provides a way to share data between components without passing it through props.
> It's useful for managing global state.
> We create a context using createContext and provide it at a higher level.
> Consumers can access the context using useContext.

üåç Code Example:
const ThemeContext = createContext();

function App() {
 return (
  <ThemeContext.Provider value="dark">
   <Component />
  </ThemeContext.Provider>
 );
}

function Component() {
 const theme = useContext(ThemeContext);
 // Use theme value here
}

‚öõÔ∏è Q3: What are React render props? How do they enable component composition and code reusability?

A3: Render props is a pattern where a component accepts a function as a prop and calls it to render content.
> It enables component composition and code reusability by allowing components to share their internal state or behavior with other components.

üîÑ Code Example:
function MouseTracker({ render }) {
 const [position, setPosition] = useState({ x: 0, y: 0 });

 useEffect(() => {
  const handleMouseMove = (event) => {
   setPosition({ x: event.clientX, y: event.clientY });
  };

  window.addEventListener('mousemove', handleMouseMove);

  return () => {
   window.removeEventListener('mousemove', handleMouseMove);
  };
 }, []);

 return render(position);
}

üñ•Ô∏è Q4: How can you optimize performance in a React application? Discuss techniques like memoization, code splitting, and lazy loading.

A4: Performance optimization techniques include memoization with useMemo and useCallback to avoid unnecessary recalculations, code splitting to split the bundle into smaller chunks, and lazy loading to load components or resources only when needed.

‚ö°Ô∏è Code Example:
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

const handleClick = useCallback(() => {
 // Handle click event
}, []);


React Interview Questions (with Answers) Part - 3 * üöÄüî•

0. Question: How does React's Virtual DOM work, and what are its advantages over the real DOM?

üëâ Answer: React's Virtual DOM is a lightweight copy of the actual DOM. When state changes, React creates a new Virtual DOM representation and compares it with the previous one. Only the differences are updated in the real DOM, reducing the need for expensive DOM manipulations.

--

1. Question: Explain the role of keys in React lists and why they are essential.

üëâ Answer: Keys help React identify each list item uniquely and efficiently update and re-render components when the list changes. They improve performance by minimizing re-renders and avoiding issues like incorrect component recycling.

Code Example:

// Without keys
const itemsWithoutKeys = items. map((item) => <li>{item}</li>);

// With unique ids as keys
const itemsWithKeys = items. map((item) => <li key={items.id}>{item}</li>);

--

2. Question: Explain the concept of higher-order components (HOCs) in React.

üëâ Answer: Higher-order components are functions that take a component as an input and return an enhanced component with additional props or functionality. They are commonly used for code reuse, logic abstraction, and cross-cutting concerns.

Code example:

const withLogger = (WrappedComponent) => {
 const EnhancedComponent = (props) => {
  console.log('Component props:', props);
  return <WrappedComponent {...props} />;
 };

 return EnhancedComponent;
};

// Usage
const MyComponent = (props) => {
 // Component logic here
};

export default withLogger(MyComponent);

--

3. Question: What is the significance of React Fragments, and when should you use them?

üëâ Answer: React Fragments allow you to group multiple components without introducing an additional parent element in the DOM. They are useful when you need to return multiple elements from a component's render method.

Code example:

import React, { Fragment } from 'react';

const MyComponent = () => {
 return (
  <Fragment>
   <h1>Title</h1>
   <p>Paragraph 1</p>
   <p>Paragraph 2</p>
  </Fragment>
 );
};